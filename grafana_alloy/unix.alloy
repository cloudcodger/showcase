declare "unix_monitor" {

    argument "environment" {
        optional = false
    }

    discovery.relabel "integrations_node_exporter" {
        targets = prometheus.exporter.unix.integrations_node_exporter.targets

        rule {
            target_label = "environment"
            replacement  = argument.environment.value
        }

        rule {
            target_label = "instance"
            replacement  = constants.hostname
        }

        rule {
            target_label = "job"
            replacement = "integrations/node_exporter"
        }
    }

    prometheus.exporter.unix "integrations_node_exporter" {
        // disable_collectors = ["btrfs", "ipvs", "infiniband", "xfs", "zfs"]
        set_collectors = ["cpu", "filesystem", "memory", "systemd"]


        filesystem {
            fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
            mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
            mount_timeout        = "5s"
        }

        netclass {
            ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
        }

        netdev {
            device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
        }
    }

    prometheus.scrape "integrations_node_exporter" {
        targets    = discovery.relabel.integrations_node_exporter.output
        forward_to = [prometheus.relabel.integrations_node_exporter.receiver]
    }

    prometheus.relabel "integrations_node_exporter" {
        forward_to = [prometheus.remote_write.metrics_service.receiver]

        rule {
            source_labels = ["__name__"]
            regex         = "node_scrape_collector_.+"
            action        = "drop"
        }
    }

    prometheus.remote_write "metrics_service" {
        endpoint {
            url = sys.env("MIMIR_URL")
        }
    }
}
